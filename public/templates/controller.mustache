/**
 * 业务逻辑控制层（Controller）
 */

import { HTTP_STATUS, IResponsePaginated } from '@/common';
import { ApiExtraModels, ApiOperation, ApiTags } from '@nestjs/swagger';
import { Body, Controller, Get, HttpCode, HttpException, Param, Post, Query } from '@nestjs/common';
import { ApiPaginatedResponseBO, ApiListResponseBO, ApiResponseBO } from '@/extends/swagger';

import { Create{{ upperName }}DTO, Find{{ upperName }}DTO, Paginated{{ upperName }}DTO, Update{{ upperName }}DTO } from '../dto';
import { {{ upperName }}Service } from '../service';
import { {{ upperName }}BO } from '../bo';

@ApiTags('{{ upperName }}')
@Controller('{{ fileName }}')
@ApiExtraModels({{ upperName }}BO)
export class {{ upperName }}Controller {
  constructor(
    private readonly {{ fileName }}: {{ upperName }}Service,
  ) {}

  @ApiOperation({ summary: '查询详情 - {{ upperName }}' })
  @ApiResponseBO({{ upperName }}BO)
  @Get('/find/one')
  public async findOne(@Query() dto: Find{{ upperName }}DTO): Promise<{{ upperName }}BO> {
    return this.{{ fileName }}.findOne(dto);
  }

  @ApiOperation({ summary: '查询全部 - {{ upperName }}' })
  @ApiListResponseBO({{ upperName }}BO)
  @Get('/find/all')
  public async findAll(@Query() dto: Find{{ upperName }}DTO): Promise<{{ upperName }}BO[]> {
    return this.{{ fileName }}.findAll(dto);
  }

  @ApiOperation({ summary: '分页查询 - {{ upperName }}' })
  @ApiPaginatedResponseBO({{ upperName }}BO)
  @Get('/paginated')
  public async paginated(@Query() dto: Paginated{{ upperName }}DTO): Promise<IResponsePaginated<{{ upperName }}BO>> {
    return this.{{ fileName }}.paginated(dto);
  }

  @ApiOperation({ summary: '创建 - {{ upperName }}' })
  @ApiResponseBO({{ upperName }}BO)
  @Post('/create')
  @HttpCode(HTTP_STATUS.SUCCESS)
  public async create(@Body() dto: Create{{ upperName }}DTO): Promise<{{ upperName }}BO> {
    return this.{{ fileName }}.create(dto);
  }

  @ApiOperation({ summary: '更新 - {{ upperName }}' })
  @ApiResponseBO()
  @Post('/update/:id')
  @HttpCode(HTTP_STATUS.SUCCESS)
  public async update(@Param('id') id: string, @Body() dto: Update{{ upperName }}DTO): Promise<void> {
    if (!id) throw new HttpException('请求参数有误，缺少 id', HTTP_STATUS.UNPROCESSABLE);
    return this.{{ fileName }}.update(id, dto);
  }

  @ApiOperation({ summary: '删除 - {{ upperName }}' })
  @ApiResponseBO()
  @Post('/delete/:id')
  @HttpCode(HTTP_STATUS.SUCCESS)
  public async delete(@Param('id') id: string): Promise<void> {
    if (!id) throw new HttpException('请求参数有误，缺少 id', HTTP_STATUS.UNPROCESSABLE);
    return this.{{ fileName }}.delete(id);
  }
}

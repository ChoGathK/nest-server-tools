/**
 * Service (业务逻辑处理层)
 *
 * 当前层级负责定义对外暴露的能力，即本身可以完成哪些任务，并负责对内协调 Mananger/DAO 层来处理业务逻辑
 *
 * 本层的使用场景有：
 *
 * 1. 对 Mananger 层的调用
 * 2. 对 DAO 层的调用 (简单的 CURD 场景)
 *
 * 当设计复杂业务场景时，应该考虑将 Service 部分处理逻辑下沉为 Manager
 */

import { Injectable } from '@nestjs/common';

import { Create{{ upperName }}DTO, Find{{ upperName }}DTO, Paginated{{ upperName }}DTO, Update{{ upperName }}DTO } from '../dto';
import { {{ upperName }}DAO } from '../dao';

@Injectable()
export class {{ upperName }}Service {
  constructor(
    private readonly {{ fileName }}DAO: {{ upperName }}DAO,
  ) {}

  /** 单条查询 */
  public async findOne(dto: Find{{ upperName }}DTO) {
    return this.{{ fileName }}DAO.findOne(dto);
  }

  /** 多条查询 */
  public async findAll(dto: Find{{ upperName }}DTO) {
    return this.{{ fileName }}DAO.findAll(dto);
  }

  /** 分页查询 */
  public async paginated(dto: Paginated{{ upperName }}DTO) {
    return this.{{ fileName }}DAO.paginated(dto);
  }

  /** 创建 */
  public async create(dto: Create{{ upperName }}DTO) {
    return this.{{ fileName }}DAO.create(dto);
  }

  /** 更新 */
  public async update(id: string, dto: Update{{ upperName }}DTO) {
    return this.{{ fileName }}DAO.update(id, dto);
  }

  /** 按主键ID删除 */
  public async delete(id: string) {
    return this.{{ fileName }}DAO.delete(id);
  }
}